0. SELECT문의 기본 구조
	SELECT [DISTINCT] [컬럼명]
	FROM [테이블명]
	WHERE [쿼리 조건]
	GROUP BY [컬럼명] HAVING [집계함수 조건]
	ORDER BY [컬럼명 ASC || 컬럼명 DESC]
	;

1. 테이블 전체 조회 : SELECT [컬럼명] FROM [테이블명] ;
	- *(Asterisk)로 조회
		SELECT *
		FROM employees;

	- 컬럼명으로 조회
		SELECT emp_no
		FROM employees;

		SELECT emp_no, first_name
		FROM employees;

2. 특정 조건으로 조회 : SELECT [컬럼명] FROM [테이블명] WHERE [쿼리 조건];
	- 특정 데이터와 일치하는 조회
		SELECT *
		FROM employees
		WHERE emp_no = 10001;

		SELECT *
		FROM employees
		WHERE first_name = 'Georgi';
	
	- 관계 연산자를 이용하여 조회
		SELECT *
		FROM employees
		WHERE emp_no <= 10005;
	
	- AND, OR로 여러 조건을 설정하여 조회
		SELECT *
		FROM employees
		WHERE emp_no <= 10001
		  AND emp_no <= 10005;

		SELECT *
		FROM employees
		WHERE emp_no <= 10003
		   OR emp_no >= 499997;

		   -- 60000 이하인 사원의 사번 조회
			SELECT emp_no FROM salaries
			WHERE salary <= 60000;

			-- 60000 ~ 70000 사이인 사원의 사번 조회
			SELECT emp_no FROM salaries
			WHERE salary >= 60000
			AND salary <= 70000;

			-- 사원번호가 10001, 10005인 사원 조회
			SELECT * FROM employees
			WHERE emp_no = 10001
			or emp_no = 10005;

	- BETWEEN [A] AND [B]로 해당 범위 내의 데이터 조회
		SELECT *
		FROM employees
		WHERE emp_no BETWEEN 10003 AND 10010;

		-- 10003 ~ 10005 사이의 값, 실행 속도가 느려짐 
		SELECT * FROM employees
		WHERE emp_no BETWEEN 10003 AND 10005;
	
	- IN()으로 해당 데이터 조회 / 복수의 특정 값들에 일치하는 데이터 조회
		SELECT *
		FROM employees
		WHERE emp_no IN( 10003, 10010 );

		-- 데이터 조회 
		SELECT * FROM employees
		WHERE emp_no IN(10001, 10005);

	- LIKE로 문자열의 내용을 조회 / resource를 많이 먹음 > 속도 느려짐 > 효율 좋게 사용
		* 따옴표로 감싸서 사용
		> "%"는 무엇이든 허용한다는 의미입니다.
			('%m') : m이 마지막 글자로 오는 값
			SELECT *
			FROM employees
			WHERE first_name like( '%eo' );

			('m%') : m이 첫 글자로 오는 값
			SELECT *
			FROM employees
			WHERE first_name like( 'eo%' );

		>"_"는 "_"의 개수만큼 허용합니다. "__"인 경우는 2글자라면 무엇이든 허용한다는 의미입니다.
			('_m') : m으로 끝나는 n(_)글자의 값 
			SELECT *
			FROM employees
			WHERE first_name like( '_eorgi' );

			('m_') : m으로 시작하는 n(_)글자의 값 
			SELECT *
			FROM employees
			WHERE first_name like( 'Georg_' );

			-- 직급명에 'engineer'가 포함된 사원의 사번과 직급 조회 
			SELECT emp_no, title FROM titles
			WHERE title LIKE ('%engineer%');

	- ORDER BY로 정렬하여 조회 : 기본값 > 데이터베이스에 입력한 순대로 정렬
		> ASC : 오름차순으로 정렬합니다.
			SELECT *
			FROM employees
			ORDER BY emp_no ASC;
		> DESC : 내림차순으로 정렬합니다.
			SELECT *
			FROM employees
			ORDER BY emp_no DESC;

			-- 사원이름을 오름차순, 성을 내림차순 
			SELECT * FROM employees
			ORDER BY first_name ASC, last_name DESC;

	- DISTINCT로 중복값 없이 조회 / 레코드 상으로 봤을 때 중복이 있을 경우 중복값 없이 조회
		SELECT DISTINCT dept_no
		FROM dept_manager;
	
	- LIMIT로 출력 개수를 제한하여 조회 
	* offset : offset에 입력한 숫자에서 시작, 페이징 구성 > offset 숫자가 커질수록 느려짐
		SELECT *
		FROM employees
		LIMIT 5;

		SELECT *
		FROM employees
		LIMIT 5 OFFSET 10;

3. 서브쿼리(SubQuery) : 쿼리 안에 또다른 쿼리가 있는 형태
	SELECT *
	FROM dept_manager
	WHERE
		dept_no = (
					SELECT dept_no 
					FROM dept_manager
					WHERE emp_no = 110114
				  );

		SELECT * FROM dept_manager
		WHERE dept_no = 
					( 
						SELECT dept_no FROM dept_manager
						WHERE emp_no = 110344
					);

4. ANY / ALL 
in : 서브쿼리의 결과에 존재하는 임의의 값과 동일한 조건
any : 서브쿼리의 결과에 존재하는 어느 하나의 값이라도 만족하는 조건(부분일치)
all : 서브쿼리의 결과에 존재하는 모든 값을 만족하는 조건(완전일치)
	- 서브쿼리의 결과가 2개 이상이라 에러가 납니다. **
		SELECT *
		FROM dept_manager
		WHERE dept_no = (
						  SELECT dept_no 
						  FROM dept_manager
						  WHERE dept_no = 'd002'
					    );

		SELECT * FROM dept_manager
		WHERE emp_no in 
					( 
						SELECT emp_no FROM dept_manager
						WHERE dept_no = 'd009'
					);
					
		SELECT * FROM dept_manager
		WHERE emp_no = ANY 
					( 
						SELECT emp_no FROM dept_manager
						WHERE dept_no = 'd009'
					);
					
		SELECT * FROM dept_manager
		WHERE emp_no = all 
					( 
						SELECT emp_no FROM dept_manager
						WHERE dept_no = 'd009'
					);

	- ANY를 사용하면 2개 이상의 결과 중 하나라도 만족하는 데이터를 조회합니다.
		SELECT *
		FROM dept_manager
		WHERE dept_no = ANY (
							  SELECT dept_no 
							  FROM dept_manager
							  WHERE dept_no = 'd002'
						    );

	- ALL을 사용하면 2개 이상의 결과 모두를 만족하는 데이터를 조회합니다.
		SELECT *
		FROM dept_manager
		WHERE dept_no = ALL (
							  SELECT dept_no 
							  FROM dept_manager
							  WHERE dept_no = 'd002'
					  	    );

5. 집계 함수
	- AVG(컬럼명) : 평균을 구합니다.
	- MAX(컬럼명) : 최대값을 구합니다.
	- MIN(컬럼명) : 최소값을 구합니다.
	- COUNT(컬럼명) : 개수를 구합니다.
	- SUM(컬럼명) : 합계를 구합니다.

	SELECT COUNT(*)
	from employees;

	SELECT COUNT(emp_no)
	from employees
	WHERE emp_no = 10001;

	-- 평균
	-- avg() : 전체 평균
	SELECT avg(salary)
	FROM salaries;

	-- max() : 제일 높은 값의 평균
	SELECT max(salary)
	FROM salaries;

	-- min() : 제일 낮은 값의 평균
	SELECT min(salary)
	FROM salaries;

	-- avg() : 전체 평균
	SELECT avg(salary)
	FROM salaries;

	-- max() : 제일 높은 값의 평균
	SELECT max(salary)
	FROM salaries;

	-- min() : 제일 낮은 값의 평균
	SELECT min(salary)
	FROM salaries;

	-- 모든 값의 개수
	SELECT COUNT(*)
	from employees;

	-- 10001이란 값을 가진 컬럼 개수
	SELECT COUNT(emp_no)
	from employees
	WHERE emp_no = 10001;


6. 그룹으로 묶어서 조회 : GROUP BY 컬럼명 [ HAVING 집계함수조건 ] > HAVING 생략 가능
	SELECT dept_no, COUNT(emp_no) AS cnt
	FROM dept_manager
	GROUP BY dept_no
	HAVING cnt > 2;

		-- 사원별 급여의 평균 
		SELECT emp_no, avg(salary)
		FROM salaries
		group BY emp_no;

		-- 직급별 사원의 수 집계
		-- having : group by의 조건 
		SELECT title, COUNT(title)
		FROM titles
		GROUP BY title HAVING COUNT(title) >= 100000;

		-- 30000 ~ 50000
		SELECT emp_no, avg(salary) AS avg_s
		FROM salaries
		group BY emp_no 
		HAVING avg_s >= 30000
		and avg_s <= 50000;

		SELECT emp_no, avg(salary)
		FROM salaries
		group BY emp_no
		HAVING AVG(salary) BETWEEN 30000 AND 50000;


	* concat / 문자열을 합치는 함수 & as : 별칭 지정
		SELECT concat(last_name, ' ' ,first_name) AS fullname
		FROM employees;
