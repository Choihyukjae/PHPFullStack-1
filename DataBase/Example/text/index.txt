index 
 : 테이블에 대한 검색 성능의 속도를 높여주는 용도
 * 데이터 오름차순 정렬, B+ tree 방식

B-tree(=B tree)
 : *이진트리를 확장해 하나의 노드가 가질 수 있는 자식 *노드의 최대 숫자가 2보다 큰 트리 구조
 : 모든 노드에 레코드 포인터를 가짐 
  * 이진트리 : 각각의 노드가 최대 두 개의 자식 노드를 가지는 트리 자료 구조
  * 노드 : 하나의 자료 구조에 포함된 정보 표현(mariadb > 노드 = 페이지)
    (값, 조건을 포함할 수 있고 다른 독립된 자료 구조의 역할을 할 가능성 있음)

B+tree
 : B-tree의 특징을 가지고 있지만, 모든 키 값들이 리프 노드에 정렬되어 있는 트리 구조
 : *리프 노드에서만 레코드 포인터를 가짐
  * 리프 노드 : 제일 마지막에 존재하는 노드(말단 노드)

종류
 : 클러스터 인덱스(Clustered Index)
  - PK 생성 시 자동으로 생성(테이블 당 1개만 존재)
 : 보조 인덱스(Secondary Index)
  - 필요에 따라 지정하여 생성, 복수 설정 가능

장/단점
 - 장점 : 조회 속도와 그에 따른 성능 향상, 시스템의 부하 감소
 - 단점 : DB의 10%에 해당하는 저장공간/추가작업 필요, 관리 미흡 > 성능 저하 

주의점
 - insert, update, delete가 빈번하게 일어나는 테이블 X 
   (인덱스의 크기가 비대해져 성능 저하)
 - 데이터가 테이블의 10~15% 이하 일 경우 효율적
 - 속도 향상 > 우선 효율적인 쿼리 작성을 고려
 - 인덱스 추가 시 대량의 데이터로 해당 테이블의 crud 테스트
 - 사용하지 않는 인덱스 제거 / 수정 불가, 수정 사항 O > 인덱스 제거 후 다시 만듬
 - FK를 지정한 열 > 자동으로 FK 인덱스 생성

사용하면 좋은 경우
 - 규모가 작지 않은 테이블 (=회원 정보 테이블)
 - insert, update, delete가 자주 발생하지 않는 컬럼
 - join, where, order by에 자주 사용되는 컬럼
 - 데이터의 중복도가 낮은 컬럼

확장 프로그램
 auto rename tag
 css peek
 git history
 html css support
 html to css autocompletion
 indent-rainbow
 live server